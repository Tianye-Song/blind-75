# Python3

# Brute Force
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        max_len = 0
        
        left = 0
        
        for right in range(len(s)):
            count[s[right]] = count.get(s[right],0)+1
            while (right-left +1 - max(count.values()) > k):
                count[s[left]] -= 1
                left += 1
            max_len = max(max_len, right-left+1)
            right += 1
        return max_len

# Tricky way 
# Slightly faster, because it doesn't need to count the max every time in the while loop
# Since the decrease change of the count dictionary will not affect the max length result
# Given the constraint right-left +1 - maxf > k, 
# the maxf needs to be bigger than the current one to achieve a larger length

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        max_len = 0
        
        left = 0
        maxf = 0
        
        for right in range(len(s)):
            count[s[right]] = count.get(s[right],0)+1
            maxf = max(maxf, count[s[right]])
            while (right-left +1 - maxf > k):
                count[s[left]] -= 1
                left += 1
            max_len = max(max_len, right-left+1)
            right += 1
        return max_len
