# Python3
# First version

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        result = [1]*len(nums)
        prefix = 1
        for i in range(len(nums)):
            result[i] = prefix
            prefix *= nums[i]
        
        postfix = 1
        for i  in range(len(nums)-1, -1, -1):
            result[i] *= postfix
            postfix *= nums[i]
        
        return result
 # Thoughts
 # Dynamic programming
 # The prefix and postfix used each time could be computed by the prefix and postfix in the previous step
 # Instead of computing it from the very beginning which will lead to a O(n^2) complexity
 
 
