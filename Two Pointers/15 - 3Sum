# Python 3

# Two pointers version

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = []
        nums.sort()
        for i, n in enumerate(nums):
            if i>0 and nums[i] == nums[i-1]:
                continue
            else:
                left, right = i+1, len(nums)-1
                while left < right:
                    threeSum = n + nums[left] + nums[right]
                    if threeSum > 0 :
                        right -= 1
                    elif threeSum < 0:
                        left += 1
                    else:
                        result.append([n, nums[left], nums[right]])
                        left += 1
                        while nums[left] == nums[left-1] and left < right:
                            left += 1
        return result
# Thoughts
# Instead of computing all the combination which will be O(n^3) time complexity,
# for the second and third loop, use two pointers to compute the residual sum 
# Reduce the time complexity to O(n^2)
